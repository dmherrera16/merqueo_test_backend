<?php

namespace Tests\Feature\Controllers;

use App\Models\CashRegister;
use App\Repositories\CashRegisterRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CrateMovementControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     *
     * @test
     */
    public function createMovementSuccess()
    {
        $dataCash = [
            "denomination" => "billetes",
            "quantity" => 2,
            "value" => 10000
        ];
        factory(CashRegister::class)->create($dataCash);

        $dataMovement = ['type' => 'ingreso', 'amount' => 30000];
        $data = $dataMovement;

        $data["transactions"] = [
            [
                "denomination" => "billetes",
                "quantity" => 2,
                "value" => 10000
            ],
            [
                "denomination" => "moneda",
                "quantity" => 1,
                "value" => 20000
            ]
        ];

        $response = $this->post(route("movement.create"), $data, ['Accept' => 'application/json']);

        $response->assertStatus(201);
        $response->assertJson(['message' => __('movement.create_success')]);
        $this->assertDatabaseHas('movements', $dataMovement);
        $this->assertDatabaseHas('cash_register', [
                "denomination" => "billetes",
                "quantity" => 3,
                "value" => 10000
            ]
        );
    }

    /**
     *
     * @test
     */
    public function createMovementNotMoneyBack()
    {
        $dataCash = [
            "denomination" => "billetes",
            "quantity" => 5,
            "value" => 5000
        ];
        factory(CashRegister::class)->create($dataCash);

        $data_movement = ['type' => 'ingreso', 'amount' => 8000];
        $data = $data_movement;
        $data["transactions"] = [
            [
                "denomination" => "billetes",
                "quantity" => 2,
                "value" => 5000
            ]
        ];

        $response = $this->post(route("movement.create"), $data, ['Accept' => 'application/json']);

        $response->assertStatus(500);
        $response->assertJson(['message' => __('movement.money_back_failed')]);
    }
}
