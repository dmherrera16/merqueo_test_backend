<?php

namespace Tests\Feature\Repositories;

use App\Models\CashRegister;
use App\Models\Movements;
use App\Repositories\CreateMovementsRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * Class CreateMovementsRepositoryTest
 * @package Tests\Feature\Repositories
 */
class CreateMovementsRepositoryTest extends TestCase
{
    /**
     * @var CreateMovementsRepository
     */
    protected $createMovementsRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->createMovementsRepository = new CreateMovementsRepository(new Movements());
    }

    /**
     * This function test register payment in movement table
     *
     * @test
     */
    public function createMovementInstance(){

        $dataCash = [
            "denomination" => "billetes",
            "quantity" => 5,
            "value" => 1000
        ];

        factory(CashRegister::class)->create($dataCash);

        $dataMovement = ['type' => 'ingreso', 'amount' => 8000];
        $data = $dataMovement;
        $data["transactions"] = [
            [
                "denomination" => "billetes",
                "quantity" => 2,
                "value" => 5000
            ]
        ];

        $response = $this->createMovementsRepository->create($data);

        $this->assertInstanceOf(Movements::class, $response);
        $this->assertDatabaseHas('movements', $dataMovement);
    }

    /**
     * This function test PDOException when create movement fail
     * @test
     */
    public function createMovementException(){
        $this->expectException(\PDOException::class);
        $this->createMovementsRepository->create([]);
    }
}
